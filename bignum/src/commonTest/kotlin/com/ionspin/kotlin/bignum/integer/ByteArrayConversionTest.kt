/*
 *    Copyright 2019 Ugljesa Jovanovic
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *
 */

package com.ionspin.kotlin.bignum.integer

import com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic
import kotlin.test.Test
import kotlin.test.assertTrue

/**
 * Created by Ugljesa Jovanovic
 * ugljesa.jovanovic@ionspin.com
 * on 31-Jul-2019
 */

class ByteArrayConversionTest {

    @Test
    fun testToAndFromByteArray() {
        assertTrue {
            val bigIntOriginal = BigInteger.fromULong(ULong.MAX_VALUE)
            val byteArray = bigIntOriginal.toUByteArray()
            val reconstructed = BigInteger.fromUByteArray(byteArray, Sign.POSITIVE)
            bigIntOriginal == reconstructed
        }

        assertTrue {
            val bigIntOriginal = BigInteger.fromLong(Long.MIN_VALUE)
            val byteArray = bigIntOriginal.toUByteArray()
            val reconstructed = BigInteger.fromUByteArray(byteArray, Sign.NEGATIVE)
            bigIntOriginal.equals(reconstructed)
        }

        assertTrue {
            val bigIntOriginal = BigInteger.fromULong(ULong.MAX_VALUE) + BigInteger.fromULong(ULong.MAX_VALUE)
            val byteArray = bigIntOriginal.toUByteArray()
            val reconstructed = BigInteger.fromUByteArray(byteArray, Sign.POSITIVE)
            bigIntOriginal.equals(reconstructed)
        }
    }

    @Test
    fun toUByteArray() {
        assertTrue {
            val expected = ubyteArrayOf(
                0x11U, 0x22U, 0x33U, 0x44U, 0x55U, 0x66U, 0x77U,
                0x88U, 0x99U, 0xAAU, 0xBBU, 0xCCU, 0xDDU, 0xEEU, 0xFFU
            )
            val bigIntOriginal = BigInteger.parseString("00112233445566778899AABBCCDDEEFF", 16)
            val byteArray = bigIntOriginal.toUByteArray()
            byteArray.contentEquals(expected)
        }
    }

    @Test
    fun fromUByteArray() {
        assertTrue {
            val expected = BigInteger.parseString("112233445566778899AABBCCDDEEFF00", 16)
            val bigInt = BigInteger.fromUByteArray(
                ubyteArrayOf(
                    0x11U, 0x22U, 0x33U, 0x44U, 0x55U, 0x66U, 0x77U, 0x88U,
                    0x99U, 0xAAU, 0xBBU, 0xCCU, 0xDDU, 0xEEU, 0xFFU, 0x00U
                ),
                Sign.POSITIVE
            )
            bigInt == expected
        }
    }

    @Test
    fun testConversionFrom64bit() {
        assertTrue {
            val input = ulongArrayOf(0b1111000000000000000000000000000000000000000000000000000000011111UL)
            val expected = ulongArrayOf(0b0111000000000000000000000000000000000000000000000000000000011111UL, 0b1UL)
            val result = BigInteger63Arithmetic.convertFrom64BitRepresentation(input)

            expected.contentEquals(result)
        }
        assertTrue {
            val input = ulongArrayOf(0b1111000000000000000000000000000000000000000000000000000000011111UL, 0b101UL)
            val expected = ulongArrayOf(0b0111000000000000000000000000000000000000000000000000000000011111UL, 0b1011UL)
            val result = BigInteger63Arithmetic.convertFrom64BitRepresentation(input)

            expected.contentEquals(result)
        }
        assertTrue {
            val input = ulongArrayOf(
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL
            )
            val expected = ulongArrayOf(
                0b0111000000000000000000000000000000000000000000000000000000011111UL,
                0b0110000000000000000000000000000000000000000000000000000000111111UL,
                0b11UL
            )
            val result = BigInteger63Arithmetic.convertFrom64BitRepresentation(input)

            expected.contentEquals(result)
        }

        assertTrue {
            val input = ulongArrayOf(
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL,
                0b1111000000000000000000000000000000000000000000000000000000011111UL
            )
            val expected = ulongArrayOf(
                0b0111000000000000000000000000000000000000000000000000000000011111UL,
                0b0110000000000000000000000000000000000000000000000000000000111111UL,
                0b0100000000000000000000000000000000000000000000000000000001111111UL,
                0b0000000000000000000000000000000000000000000000000000000011111111UL,
                0b0000000000000000000000000000000000000000000000000000000111111111UL,
                0b0000000000000000000000000000000000000000000000000000001111111110UL,
                0b0000000000000000000000000000000000000000000000000000011111111100UL,
                0b0000000000000000000000000000000000000000000000000000111111111000UL,
                0b0000000000000000000000000000000000000000000000000001111111110000UL,
                0b0000000000000000000000000000000000000000000000000011111111100000UL,
                0b0000000000000000000000000000000000000000000000000111111111000000UL,
                0b0000000000000000000000000000000000000000000000001111111110000000UL,
                0b0000000000000000000000000000000000000000000000011111111100000000UL,
                0b0000000000000000000000000000000000000000000000111111111000000000UL,
                0b0000000000000000000000000000000000000000000001111111110000000000UL,
                0b0000000000000000000000000000000000000000000011111111100000000000UL,
                0b0000000000000000000000000000000000000000000111111111000000000000UL,
                0b0000000000000000000000000000000000000000001111111110000000000000UL,
                0b0000000000000000000000000000000000000000011111111100000000000000UL,
                0b0000000000000000000000000000000000000000111111111000000000000000UL,
                0b0000000000000000000000000000000000000001111111110000000000000000UL,
                0b0000000000000000000000000000000000000011111111100000000000000000UL,
                0b0000000000000000000000000000000000000111111111000000000000000000UL,
                0b0000000000000000000000000000000000001111111110000000000000000000UL,
                0b0000000000000000000000000000000000011111111100000000000000000000UL,
                0b0000000000000000000000000000000000111111111000000000000000000000UL,
                0b0000000000000000000000000000000001111111110000000000000000000000UL,
                0b0000000000000000000000000000000011111111100000000000000000000000UL,
                0b0000000000000000000000000000000111111111000000000000000000000000UL,
                0b0000000000000000000000000000001111111110000000000000000000000000UL,
                0b0000000000000000000000000000011111111100000000000000000000000000UL,
                0b0000000000000000000000000000111111111000000000000000000000000000UL,
                0b0000000000000000000000000001111111110000000000000000000000000000UL,
                0b0000000000000000000000000011111111100000000000000000000000000000UL,
                0b0000000000000000000000000111111111000000000000000000000000000000UL,
                0b0000000000000000000000001111111110000000000000000000000000000000UL,
                0b0000000000000000000000011111111100000000000000000000000000000000UL,
                0b0000000000000000000000111111111000000000000000000000000000000000UL,
                0b0000000000000000000001111111110000000000000000000000000000000000UL,
                0b0000000000000000000011111111100000000000000000000000000000000000UL,
                0b0000000000000000000111111111000000000000000000000000000000000000UL,
                0b0000000000000000001111111110000000000000000000000000000000000000UL,
                0b0000000000000000011111111100000000000000000000000000000000000000UL,
                0b0000000000000000111111111000000000000000000000000000000000000000UL,
                0b0000000000000001111111110000000000000000000000000000000000000000UL,
                0b0000000000000011111111100000000000000000000000000000000000000000UL,
                0b0000000000000111111111000000000000000000000000000000000000000000UL,
                0b0000000000001111111110000000000000000000000000000000000000000000UL,
                0b0000000000011111111100000000000000000000000000000000000000000000UL,
                0b0000000000111111111000000000000000000000000000000000000000000000UL,
                0b0000000001111111110000000000000000000000000000000000000000000000UL,
                0b0000000011111111100000000000000000000000000000000000000000000000UL,
                0b0000000111111111000000000000000000000000000000000000000000000000UL,
                0b0000001111111110000000000000000000000000000000000000000000000000UL,
                0b0000011111111100000000000000000000000000000000000000000000000000UL,
                0b0000111111111000000000000000000000000000000000000000000000000000UL,
                0b0001111111110000000000000000000000000000000000000000000000000000UL,
                0b0011111111100000000000000000000000000000000000000000000000000000UL,
                0b0111111111000000000000000000000000000000000000000000000000000000UL,
                0b0111111110000000000000000000000000000000000000000000000000000000UL,
                0b0111111100000000000000000000000000000000000000000000000000000001UL,
                0b0111111000000000000000000000000000000000000000000000000000000011UL,
                0b0111110000000000000000000000000000000000000000000000000000000111UL,
                0b0111100000000000000000000000000000000000000000000000000000001111UL,
                0b0111000000000000000000000000000000000000000000000000000000011111UL,
                0b0110000000000000000000000000000000000000000000000000000000111111UL,
                0b0100000000000000000000000000000000000000000000000000000001111111UL,
                0b0000000000000000000000000000000000000000000000000000000011111111UL,
                0b0000000000000000000000000000000000000000000000000000000000001111UL
            )
            val result = BigInteger63Arithmetic.convertFrom64BitRepresentation(input)

            expected.contentEquals(result)
        }
    }

    @Test
    fun fromUByteArraySpecific() {
        assertTrue {
            val uByteArray = "19191919191919191919191919191919".chunked(2).map { it.toUByte(16) }.toUByteArray()
            val bigInt = BigInteger.fromUByteArray(
                uByteArray,
                Sign.POSITIVE
            )
            val reconstructed = bigInt.toUByteArray()
            uByteArray.contentEquals(reconstructed)
        }
    }

    @Test
    fun testTwosComplementHelperConversion() {
    }
}

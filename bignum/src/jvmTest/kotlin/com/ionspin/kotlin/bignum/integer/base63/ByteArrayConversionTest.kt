/*
 * Copyright (c) 2020. Ugljesa Jovanovic
 */

package com.ionspin.kotlin.bignum.integer.base63

import com.ionspin.kotlin.bignum.integer.Sign
import com.ionspin.kotlin.bignum.integer.util.fromTwosComplementByteArray
import com.ionspin.kotlin.bignum.integer.util.hexColumsPrint
import com.ionspin.kotlin.bignum.integer.util.toTwosComplementByteArray
import java.math.BigInteger
import kotlin.random.Random
import kotlin.test.assertTrue
import org.junit.Assert
import org.junit.Test

/**
 * Created by Ugljesa Jovanovic
 * ugljesa.jovanovic@ionspin.com
 * on 17-Jul-2020
 */
typealias IonSpinBigInteger = com.ionspin.kotlin.bignum.integer.BigInteger

class ByteArrayConversionTest {
    @Test
    fun twosComplementHelperTest() {
        assertTrue {
            val positiveInput = ubyteArrayOf(0x00U, 0xAAU, 0xBBU, 0xCCU)
            val negativeInput = ubyteArrayOf(0xFFU, 0x55U, 0x44U, 0x34U)
            val positiveBigInt = IonSpinBigInteger.fromTwosComplementByteArray(positiveInput.asByteArray())
            val negativeBigInt = IonSpinBigInteger.fromTwosComplementByteArray(negativeInput.asByteArray())
            println(positiveBigInt.toString())
            println(negativeBigInt.toString())

            val negativeJavaBigInt = BigInteger.valueOf(-0xAABBCC)
            println(negativeJavaBigInt)
            println(negativeJavaBigInt.toByteArray().asUByteArray().hexColumsPrint())
            println(negativeJavaBigInt.toByteArray().asUByteArray().joinToString { it.toString(2) })

            val positiveJavaBigInt = BigInteger.valueOf(0xAABBCC)
            println(positiveJavaBigInt)
            println(positiveJavaBigInt.toByteArray().asUByteArray().hexColumsPrint())
            println(positiveJavaBigInt.toByteArray().asUByteArray().joinToString { it.toString(2) })

            positiveBigInt.toJavaBigInteger().equals(positiveJavaBigInt) &&
                negativeBigInt.toJavaBigInteger().equals(negativeJavaBigInt)
        }

        assertTrue {
            val positiveBigInt = IonSpinBigInteger.parseString("AABBCC", 16)
            val positiveJavaBigInt = BigInteger.valueOf(0xAABBCC)
            val positiveBigIntArray = positiveBigInt.toTwosComplementByteArray()
            val positiveJavaBigIntArray = positiveJavaBigInt.toByteArray()

            positiveBigIntArray.contentEquals(positiveJavaBigIntArray)
        }

        assertTrue {
            val negativeBigInt = IonSpinBigInteger.parseString("-AABBCC", 16)
            val negativeJavaBigInt = BigInteger.valueOf(-0xAABBCC)

            val negativeBigIntArray = negativeBigInt.toTwosComplementByteArray()
            val negativeJavaBigIntArray = negativeJavaBigInt.toByteArray()
            negativeBigIntArray.contentEquals(negativeJavaBigIntArray)
        }
    }

    @Test
    fun specificConversionTest() {
        val numberUB = ubyteArrayOf(
            0x8U, 0x9aU, 0xe9U, 0xe0U, 0x6aU, 0x68U, 0x7eU, 0xc3U, 0x78U, 0x26U, 0x9U, 0x39U, 0x52U, 0x1fU, 0xb3U,
            0x8bU, 0xdU, 0x1bU, 0x15U, 0x90U, 0xe0U, 0xc4U, 0xecU, 0x5bU, 0xf4U, 0x11U, 0x2cU, 0xcfU, 0x1fU, 0xf1U,
            0xf6U, 0xe0U, 0x42U, 0x20U, 0xb0U, 0xabU, 0xadU, 0xbU, 0xc5U, 0x7bU, 0x85U, 0xb6U, 0xd6U, 0xe0U, 0xe6U,
            0x15U, 0xc3U, 0x91U, 0xaU, 0x4fU, 0xd0U, 0x6dU, 0x2U, 0x73U, 0xd7U, 0xbaU, 0x93U, 0xe4U, 0xc6U, 0x89U,
            0x6U, 0x88U, 0x2eU, 0x36U, 0x72U, 0x89U, 0x54U, 0x81U, 0x9dU, 0xc6U, 0x1eU, 0x57U, 0x7eU, 0x5aU, 0x55U,
            0x54U, 0x6U, 0xe5U, 0xdU, 0x4eU, 0x5bU, 0x60U, 0x8eU, 0x8cU, 0xb3U, 0x63U, 0x21U, 0xa5U, 0xd6U, 0x73U,
            0x6U, 0xe0U, 0xc2U, 0x4dU, 0xb3U, 0x3bU, 0xa4U, 0xbcU, 0xa6U, 0x48U, 0x18U, 0xe8U, 0xe2U, 0x13U, 0xd6U,
            0x9bU, 0xb6U, 0x30U, 0xadU, 0xacU, 0x48U, 0x11U, 0xe3U, 0xe4U, 0xbdU, 0x94U, 0xe3U, 0x1U, 0xddU, 0x28U,
            0x80U, 0xfeU, 0x86U, 0x9eU, 0x8U, 0xa7U, 0x51U, 0xa4U, 0x2dU, 0xd4U, 0xd5U, 0x52U, 0x7bU, 0xaeU, 0xdaU,
            0x6fU, 0xf1U, 0x47U, 0x7dU, 0x73U, 0xc7U, 0x7cU, 0xccU, 0x65U, 0xdfU, 0x1bU, 0xd1U, 0x36U, 0xe9U, 0x4aU,
            0x7U, 0x80U, 0x72U, 0x3fU, 0x30U, 0xcbU, 0x12U, 0x12U, 0x21U, 0x5aU, 0xddU, 0xf3U, 0x70U, 0xf8U, 0xfeU,
            0xf8U, 0xbU, 0x15U, 0x5bU, 0xbdU, 0x8aU, 0x58U, 0x2dU, 0x31U, 0x94U, 0x7eU, 0x83U, 0xabU, 0x4dU, 0xc2U,
            0xebU, 0x6fU, 0x9U, 0x4fU, 0x18U, 0xeaU, 0x74U, 0x13U, 0xb7U, 0x28U, 0xbaU, 0x16U, 0x88U, 0xbdU, 0xd0U,
            0x3dU, 0xa8U, 0x56U, 0x52U, 0xbfU, 0xa6U, 0x8U, 0xf4U, 0xd7U, 0x80U, 0xffU, 0x29U, 0x54U, 0xf4U, 0x4aU,
            0x11U, 0x99U, 0x9fU, 0x48U, 0xa9U, 0x8aU, 0xdaU, 0xcbU, 0x22U, 0x94U, 0x10U, 0x8U, 0x29U, 0x6fU, 0x91U,
            0x41U, 0x7fU, 0xa5U, 0x3eU, 0x68U, 0xdeU, 0xb6U, 0xffU, 0x7aU, 0x16U, 0xd0U, 0x4bU, 0x3dU, 0x67U, 0x6eU,
            0xa7U, 0x4dU, 0xc5U, 0xbaU, 0xdeU, 0xbdU, 0x48U, 0x12U, 0xd7U, 0xfdU, 0xfeU, 0x84U, 0x7dU, 0x39U, 0x5fU,
            0x25U, 0x99U, 0x9bU, 0x85U, 0x29U, 0x2eU, 0xe1U, 0xbbU, 0x1aU, 0xc0U, 0x2dU, 0xa3U, 0x77U, 0x29U, 0xe0U,
            0x38U, 0x80U, 0x73U, 0x3U, 0x1cU, 0x65U, 0xaaU, 0x2U, 0x46U, 0xc9U, 0x91U, 0x3cU, 0x69U, 0x4fU, 0x9aU,
            0xbeU, 0xc2U, 0xa0U, 0xb4U, 0xd5U, 0xbfU, 0x2eU, 0x1aU, 0xd5U, 0x1aU, 0x11U, 0x7fU, 0x17U, 0x7bU, 0x52U,
            0xeaU, 0xb1U, 0xbcU, 0x2U, 0x70U, 0x3U, 0x8cU, 0xffU, 0x5eU, 0x58U, 0x45U, 0x9U, 0x48U, 0xf3U, 0x6dU,
            0x36U, 0x60U, 0x52U, 0xddU, 0x82U, 0x9bU, 0xccU, 0x58U, 0xe0U, 0x9dU, 0xe8U, 0x5fU, 0xc8U, 0x1U, 0x7dU,
            0xa0U, 0x7dU, 0x21U, 0xfU, 0xf7U, 0x5cU, 0x83U, 0x6U, 0x76U, 0xc6U, 0x5cU, 0x7bU, 0x57U, 0x22U, 0xbU,
            0xedU, 0xbfU, 0x6eU, 0x6dU, 0x38U, 0x74U, 0xfaU, 0x7U, 0x3fU, 0xefU, 0x73U, 0xa7U, 0x73U, 0x5eU, 0x46U,
            0xbaU, 0x43U, 0xe4U, 0xe2U, 0x2eU, 0x5eU, 0xbbU, 0xfcU, 0xc0U, 0x4cU, 0x49U, 0xebU, 0x62U, 0x32U, 0x5U,
            0x52U, 0x48U, 0x66U, 0xa5U, 0x78U, 0x9fU, 0x35U, 0x60U, 0xdbU, 0x27U, 0x4U, 0xa2U, 0xe6U, 0xb1U, 0x35U,
            0xefU, 0x58U, 0x96U, 0xd5U, 0x97U, 0xa5U, 0xc0U, 0xffU, 0x7dU, 0xd6U, 0x76U, 0x2fU, 0x98U, 0x25U, 0x76U,
            0x8dU, 0x56U, 0x11U, 0xf2U, 0xd3U, 0xb8U, 0x1eU, 0xc8U, 0x88U, 0x3cU, 0x7U, 0x6dU, 0x2cU, 0xc5U, 0x5bU,
            0x1U, 0x89U, 0xc7U, 0x15U, 0x3dU, 0xffU, 0x63U, 0xa3U, 0x5fU, 0xe8U, 0x6eU, 0x7eU, 0x69U, 0xe0U, 0xffU,
            0x7dU, 0x31U, 0x2cU, 0x96U, 0xe8U, 0x29U, 0xbeU, 0x8cU, 0x80U, 0x52U, 0x71U, 0x4dU, 0x9eU, 0x29U, 0x57U,
            0x31U, 0x61U, 0x3U, 0x96U, 0x80U, 0xebU, 0x88U, 0xd4U, 0x24U, 0xa3U, 0x2fU, 0x7cU, 0xf5U, 0xfaU, 0x1fU,
            0xdbU, 0xc7U, 0x85U, 0x36U, 0x21U, 0x71U, 0x6bU, 0xb9U, 0x44U, 0xc2U, 0x1fU, 0xf0U, 0xadU, 0x2aU, 0xeU,
            0x2dU, 0xd3U, 0x30U, 0xf2U, 0x7aU, 0x47U, 0xc5U, 0x92U, 0x94U, 0x78U, 0xfdU, 0xcaU, 0x7dU, 0xa6U, 0x92U,
            0x4cU, 0x31U, 0x5U, 0x91U, 0x13U, 0xadU, 0xa8U, 0x29U, 0xf3U, 0x20U, 0x74U
        )

        val number = numberUB.asByteArray()
        val bigInt = IonSpinBigInteger.fromTwosComplementByteArray(number)
        val javaBigInt = BigInteger(number)
        println("Java Number:   $javaBigInt")
        println("BigInt Number: $bigInt")
        println("Java Number:   ${javaBigInt.toString(16)}")
        println("BigInt Number: ${bigInt.toString(16)}")
        assertTrue(
            "Number comparison failed for byteArrayOf(${
                number.asUByteArray().joinToString(separator = "U, 0x") { it.toString(16) }
            }") { bigInt.toJavaBigInteger() == javaBigInt }
        val bigIntArray = bigInt.toTwosComplementByteArray()
        val javaBigIntArray = javaBigInt.toByteArray()
        assertTrue(
            "Array comparison failed for byteArrayOf(0x${
                number.asUByteArray().joinToString(separator = "U, 0x") { it.toString(16) }
            })") { bigIntArray.contentEquals(javaBigIntArray) }
    }

    @Test
    fun specificConversionTest2() {
        val numberUB = ubyteArrayOf(
            0x50U, 0xaeU, 0xfeU, 0x53U, 0xb3U, 0x97U, 0x4eU, 0xd9U, 0x1eU, 0x6bU, 0x4eU, 0xa9U, 0x24U, 0xf9U, 0xbaU,
            0xa8U, 0xe7U, 0x7bU, 0xccU, 0x2fU, 0x53U, 0x7fU, 0xbU, 0x2U, 0xefU, 0xe8U, 0x60U, 0x30U, 0xacU, 0x2cU,
            0x31U, 0x53U, 0x46U, 0xa8U, 0xf5U, 0xdcU, 0xc0U, 0xa7U, 0x96U, 0x2U, 0xf9U, 0xa5U, 0x13U, 0x10U, 0xc8U,
            0xeeU, 0xd9U, 0x88U, 0x9dU, 0x46U, 0xefU, 0x3bU, 0xafU, 0xdaU, 0x11U, 0xb1U, 0x9U, 0xffU, 0x87U, 0x5dU,
            0x64U, 0xf6U, 0xc8U, 0xf2U, 0x2fU, 0xafU, 0x62U, 0xcU, 0x72U, 0x29U, 0x69U, 0x0U, 0x68U, 0xc4U, 0xb0U,
            0x9cU, 0x56U, 0x69U, 0x76U, 0xe5U, 0x17U, 0x76U, 0x54U, 0x90U, 0xbcU, 0xe8U, 0x9cU, 0x73U, 0x38U, 0x2aU,
            0x34U, 0x2bU, 0x5cU, 0xcU, 0x5fU, 0x7bU, 0x97U, 0x52U, 0x79U, 0x85U, 0xcdU, 0x4fU
        )

        val number = numberUB.asByteArray()
        val bigInt = IonSpinBigInteger.fromTwosComplementByteArray(number)
        val javaBigInt = BigInteger(number)
        println("Java Number:   $javaBigInt")
        println("BigInt Number: $bigInt")
        println("Java Number:   ${javaBigInt.toString(16)}")
        println("BigInt Number: ${bigInt.toString(16)}")
        assertTrue(
            "Number comparison failed for byteArrayOf(${
                number.asUByteArray().joinToString(separator = "U, 0x") { it.toString(16) }
            }") { bigInt.toJavaBigInteger() == javaBigInt }
        val bigIntArray = bigInt.toTwosComplementByteArray()
        val javaBigIntArray = javaBigInt.toByteArray()
        assertTrue(
            "Array comparison failed for byteArrayOf(0x${
                number.asUByteArray().joinToString(separator = "U, 0x") { it.toString(16) }
            })") { bigIntArray.contentEquals(javaBigIntArray) }
    }

    @Test
    fun specificConversionTest3() {
        val numberUB = ubyteArrayOf(
            0x28U,
            0xa1U,
            0x4aU,
            0xdbU,
            0x2eU,
            0x90U,
            0x90U,
            0x71U,
            0x99U,
            0x15U,
            0x4fU,
            0xedU,
            0x97U,
            0x9eU,
            0xa9U,
            0x8fU,
            0x19U,
            0xd8U,
            0x48U,
            0xc1U,
            0x7bU,
            0x78U,
            0x5fU,
            0xf8U,
            0xdU,
            0xd2U,
            0xd1U,
            0x8fU,
            0x5aU,
            0xa0U,
            0x92U,
            0xc1U,
            0x74U,
            0x5eU,
            0x71U,
            0x2bU,
            0xc9U,
            0x66U,
            0x53U,
            0xa1U,
            0x0U,
            0x91U,
            0xc5U,
            0xa8U,
            0xa5U,
            0x1eU,
            0xdeU,
            0xa8U,
            0xcU,
            0x2dU,
            0xedU,
            0xe8U,
            0x27U,
            0xe1U,
            0x8eU,
            0x55U,
            0xc2U,
            0x8eU,
            0x71U,
            0x2fU,
            0x9aU,
            0x3dU,
            0xddU,
            0xc3U,
            0x84U,
            0xe4U,
            0x66U,
            0xf9U,
            0x8eU,
            0x15U,
            0x43U,
            0x2bU,
            0xceU,
            0x34U,
            0xceU,
            0xe3U,
            0x5U,
            0x2U,
            0xd5U,
            0x40U,
            0xf2U,
            0xefU,
            0xf4U,
            0xefU,
            0x3U,
            0x12U,
            0x9eU,
            0xcfU,
            0xd1U,
            0x89U,
            0xc9U,
            0xf3U,
            0x5aU,
            0x38U,
            0x6cU,
            0x4aU,
            0xa6U,
            0x8fU,
            0xd4U,
            0x18U,
            0xe6U,
            0x57U,
            0xfdU,
            0x8cU,
            0xabU,
            0xbU,
            0x80U,
            0xbfU,
            0x8bU,
            0xf3U,
            0x2bU,
            0x9dU,
            0x82U,
            0x30U,
            0xd1U,
            0x56U,
            0xbaU,
            0x7dU,
            0x50U,
            0x9eU,
            0xaeU,
            0x66U,
            0x5cU,
            0x54U,
            0xf4U,
            0xc8U,
            0xfeU,
            0x4cU,
            0x69U,
            0x6U,
            0xb3U,
            0xbcU,
            0x1dU,
            0xd6U,
            0xadU,
            0x80U,
            0xd3U,
            0x51U,
            0x72U,
            0xd5U,
            0x11U,
            0xd6U,
            0x29U,
            0x9dU,
            0x17U,
            0x6bU,
            0x79U,
            0x5aU,
            0xffU,
            0xa4U,
            0xebU,
            0x1dU,
            0x53U,
            0x45U,
            0x30U,
            0xa4U,
            0xafU,
            0xd0U,
            0xcbU,
            0x13U,
            0xa6U,
            0xfdU,
            0x9U,
            0x52U,
            0x84U,
            0xa0U,
            0x78U,
            0xdfU,
            0x68U,
            0x59U,
            0xb9U,
            0xacU,
            0x39U,
            0xbU,
            0x23U,
            0x4eU,
            0x60U,
            0x8dU,
            0x36U,
            0x71U,
            0x84U,
            0x27U,
            0x25U,
            0xffU,
            0xb7U,
            0xb5U,
            0x36U,
            0x9cU,
            0x3U,
            0x4fU,
            0x2fU,
            0x21U,
            0x22U,
            0x8eU,
            0x18U,
            0x8fU,
            0xf7U,
            0x64U,
            0x7aU,
            0x4bU,
            0x75U,
            0x3eU,
            0x5dU,
            0x1bU,
            0x1bU,
            0xcfU,
            0xadU,
            0xd2U,
            0xb7U,
            0x28U,
            0x93U,
            0x98U,
            0x92U,
            0x79U,
            0xe8U,
            0xc8U,
            0x5U,
            0xd8U,
            0x86U,
            0xb9U,
            0x87U,
            0x79U,
            0xccU,
            0x84U,
            0xb6U,
            0x3bU,
            0x3bU,
            0x8U,
            0x48U,
            0xaeU,
            0x92U,
            0xe6U,
            0xe0U,
            0xdU,
            0x51U,
            0xdeU,
            0x27U,
            0xe3U,
            0x83U,
            0x74U,
            0x78U,
            0x43U,
            0x97U,
            0x64U,
            0xcU,
            0xc5U,
            0x1aU,
            0x91U,
            0x52U,
            0x2bU,
            0xafU,
            0xdbU,
            0x5eU,
            0xa2U,
            0x78U,
            0xfdU,
            0xa6U,
            0xc9U,
            0xd6U,
            0x4bU,
            0x75U,
            0x9eU,
            0xf2U,
            0xa7U,
            0x5dU,
            0x43U,
            0xcU,
            0xc5U,
            0x2cU,
            0x50U,
            0xe0U,
            0x15U,
            0x1cU,
            0x65U,
            0x30U,
            0xfdU,
            0xf6U,
            0xd6U,
            0x74U,
            0x2eU,
            0xeU,
            0x36U,
            0x6eU,
            0xe6U,
            0xb4U,
            0x98U,
            0x2dU,
            0xdcU,
            0x1bU,
            0x1bU,
            0x12U,
            0xd3U,
            0xedU,
            0xc9U,
            0x97U,
            0xf4U,
            0x50U,
            0x5bU,
            0x2dU,
            0xcU,
            0x46U,
            0x46U,
            0x33U,
            0x44U,
            0x5cU,
            0xb1U,
            0xf9U,
            0xa6U,
            0x8aU,
            0x64U,
            0x48U,
            0x47U,
            0xe6U,
            0x60U,
            0xb3U,
            0xfbU,
            0xeaU,
            0x8eU,
            0x9fU,
            0xffU,
            0x77U,
            0xa6U,
            0x91U,
            0xf7U,
            0xefU,
            0xfeU,
            0x2dU,
            0xf5U,
            0x39U,
            0x41U,
            0x9fU,
            0x38U,
            0xd1U,
            0x1aU,
            0x0U,
            0xb7U,
            0xa2U,
            0xc9U,
            0x53U,
            0x54U,
            0x55U,
            0x2eU,
            0x30U,
            0xc8U,
            0x9aU,
            0x57U,
            0x44U,
            0xeU,
            0x8bU,
            0x6dU,
            0xf1U,
            0x4eU,
            0xb6U,
            0xecU,
            0xc6U,
            0x0U,
            0x42U,
            0x5eU,
            0x72U,
            0x54U,
            0xc9U,
            0x42U,
            0x17U,
            0x7dU,
            0x4cU,
            0x77U,
            0x27U,
            0x6cU,
            0x8aU,
            0x75U,
            0xe2U,
            0x9eU,
            0x16U,
            0x4U,
            0x66U,
            0x4U,
            0x4bU,
            0xd3U,
            0x4cU,
            0xa8U,
            0xd6U,
            0xdeU,
            0xbfU,
            0xeeU,
            0x6bU,
            0x70U,
            0x72U,
            0x51U,
            0xe9U,
            0x11U,
            0x34U,
            0xd3U,
            0x7eU,
            0x75U,
            0x1bU,
            0x6U,
            0x7fU,
            0xb3U,
            0x7U,
            0x9eU,
            0xafU,
            0xb9U,
            0xbdU,
            0xebU,
            0x1dU,
            0xc5U,
            0x92U,
            0xe8U,
            0xe2U,
            0xc7U,
            0x5dU,
            0x18U,
            0x63U,
            0xf5U,
            0x63U,
            0x92U,
            0x6dU,
            0xccU,
            0xb5U,
            0x46U,
            0xffU,
            0x71U,
            0xc9U,
            0xbaU,
            0x1cU,
            0x9aU,
            0x69U,
            0x8bU,
            0xc9U,
            0xf5U,
            0x17U,
            0xa4U,
            0x9bU,
            0xa9U,
            0x83U,
            0xfdU,
            0xd8U,
            0xeaU,
            0x68U,
            0xc6U,
            0x43U,
            0x8dU,
            0x6eU,
            0x9cU,
            0x4U,
            0x7fU,
            0x4cU,
            0x40U,
            0xa3U,
            0xf7U,
            0x59U,
            0xc1U,
            0xfcU,
            0xdaU,
            0x6U,
            0xbeU,
            0x8fU,
            0x60U,
            0xc4U,
            0x1eU,
            0xf6U,
            0x39U,
            0xfU,
            0xf4U,
            0xaaU,
            0xaaU,
            0xd4U,
            0xdeU,
            0x1cU,
            0xedU,
            0x78U,
            0x5cU,
            0xdbU,
            0x7cU,
            0xbbU,
            0x1U,
            0x5cU,
            0x73U,
            0xc8U,
            0xa4U,
            0xf3U,
            0x39U,
            0xe3U,
            0x7eU,
            0xbfU,
            0x76U,
            0x57U,
            0x7dU,
            0xe1U,
            0x8fU,
            0x7cU,
            0xb9U,
            0x90U,
            0xb2U,
            0x7dU,
            0x33U,
            0x4cU,
            0x20U,
            0x44U,
            0xa3U,
            0xd4U,
            0xacU,
            0xf8U,
            0x56U,
            0xcbU,
            0x64U,
            0xe9U,
            0x60U,
            0xfcU,
            0xd5U,
            0x8cU,
            0xa5U,
            0x80U,
            0xb8U,
            0x8U,
            0x88U,
            0xe6U,
            0x81U,
            0xe3U,
            0x23U,
            0xc6U,
            0x7U,
            0xd5U,
            0x95U,
            0x9fU,
            0x6bU,
            0x63U,
            0xecU,
            0xe7U,
            0x73U,
            0xdU,
            0xf0U,
            0x1fU,
            0xcfU,
            0xadU,
            0x80U,
            0xdfU,
            0xdfU,
            0x0U,
            0xfU,
            0xdaU,
            0x4eU,
            0x86U,
            0xe6U,
            0xa6U,
            0xeeU,
            0xb9U,
            0x8bU,
            0x20U,
            0x7dU,
            0x85U,
            0xf0U,
            0xb4U,
            0x13U,
            0xe0U,
            0x71U,
            0x74U,
            0x3cU,
            0xeeU,
            0x3dU,
            0x4bU,
            0xecU,
            0xe4U,
            0x1eU,
            0xc9U,
            0x2eU,
            0xa5U,
            0x9eU,
            0x67U,
            0xf1U,
            0xc2U,
            0xefU,
            0x2aU,
            0x46U,
            0x5aU,
            0x56U,
            0x85U,
            0x29U,
            0xd9U,
            0xa3U,
            0x42U,
            0xbfU,
            0x45U,
            0xe9U,
            0x1cU,
            0xd2U,
            0xb5U,
            0xd2U,
            0x84U,
            0x29U,
            0x8cU,
            0x3U,
            0xdU,
            0x7aU,
            0x57U,
            0x7dU,
            0x4eU,
            0x46U,
            0x1bU,
            0xadU,
            0x39U,
            0x46U,
            0x78U,
            0xabU,
            0xddU,
            0xfeU,
            0x77U
        )

        val number = numberUB.asByteArray()
        val bigInt = IonSpinBigInteger.fromTwosComplementByteArray(number)
        val javaBigInt = BigInteger(number)
        println("Java Number:   $javaBigInt")
        println("BigInt Number: $bigInt")
        println("Java Number:   ${javaBigInt.toString(16)}")
        println("BigInt Number: ${bigInt.toString(16)}")
        assertTrue(
            "Number comparison failed for byteArrayOf(${
                number.asUByteArray().joinToString(separator = "U, 0x") { it.toString(16) }
            }") { bigInt.toJavaBigInteger() == javaBigInt }
        val bigIntArray = bigInt.toTwosComplementByteArray()
        val javaBigIntArray = javaBigInt.toByteArray()
        assertTrue(
            "Array comparison failed for byteArrayOf(0x${
                number.asUByteArray().joinToString(separator = "U, 0x") { it.toString(16) }
            })") { bigIntArray.contentEquals(javaBigIntArray) }
    }

    @Test
    fun randomConversionTest() {
        val random = Random(0L)
        for (length in 1 until 100_000 step 1234) {
            singleTest(random.nextBytes(length))
        }
    }

    fun singleTest(number: ByteArray) {
        val bigInt = IonSpinBigInteger.fromTwosComplementByteArray(number)
        val javaBigInt = BigInteger(number)
        assertTrue(
            "Number comparison failed for ubyteArrayOf(${
                number.asUByteArray()
                    .joinToString(separator = "U, 0x", prefix = "0x", postfix = "U") { it.toString(16) }
            }") { bigInt.toJavaBigInteger() == javaBigInt }
        val bigIntArray = bigInt.toTwosComplementByteArray()
        val javaBigIntArray = javaBigInt.toByteArray()
        assertTrue(
            "Array comparison failed for ubyteArrayOf(0x${
                number.asUByteArray()
                    .joinToString(separator = "U, 0x", prefix = "0x", postfix = "U") { it.toString(16) }
            })") { bigIntArray.contentEquals(javaBigIntArray) }
    }

    @Test
    fun reportedIssueTest() {
        val bytes = byteArrayOf(-128, 0, 0, 0, 0, 0, 0, 0)
        val javaBig = BigInteger(1, bytes)
        val kotlinBig = IonSpinBigInteger.fromByteArray(bytes, Sign.POSITIVE)
        val javaBackToByteArray = javaBig.toByteArray().dropWhile { it == 0.toByte() }.toByteArray() // Java adds a leading zero byte
        val bignumBackToByteArray = kotlinBig.toByteArray()
        Assert.assertArrayEquals(javaBackToByteArray, bignumBackToByteArray)
    }

    @Test
    fun reportedIssueTest2() {
        val javaBigBytes = BigInteger("21000").toByteArray()
        val kotlinBigBytes = IonSpinBigInteger.parseString("21000").toByteArray()
        Assert.assertArrayEquals(javaBigBytes, kotlinBigBytes)
    }

    @Test
    fun zeroToByteArray() {
        val javaBigBytes = BigInteger("0").toByteArray()
        val kotlinBigBytes = IonSpinBigInteger.parseString("0").toByteArray()
        Assert.assertArrayEquals(javaBigBytes, kotlinBigBytes)
    }
}
